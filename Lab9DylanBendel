#include <stdio.h>
#include <stdlib.h>

#define MAX_HASH_SIZE 24

// RecordType
struct RecordType
{
    int id;
    char name;
    int order;
    struct RecordType *chain; // Pointer to the next record in the chain
};


struct HashType
{
    struct RecordType *chain[MAX_HASH_SIZE];
};

// Compute the hash function
int hash(int x)
{
    return x % MAX_HASH_SIZE;
}


// parses input file to an integer array
int parseData(char *inputFileName, struct RecordType **ppData)
{
    FILE *inFile = fopen(inputFileName, "r");
    int dataSz = 0;
    int i, n;
    char c;
    struct RecordType *pRecord;
    *ppData = NULL;

    if (inFile)
    {
        fscanf(inFile, "%d\n", &dataSz);
        *ppData = (struct RecordType *)malloc(sizeof(struct RecordType) * dataSz);
        // Implement parse data block
        if (*ppData == NULL)
        {
            printf("Cannot allocate memory\n");
            exit(-1);
        }
        for (i = 0; i < dataSz; ++i)
        {
            pRecord = *ppData + i;
            fscanf(inFile, "%d ", &n);
            pRecord->id = n;
            fscanf(inFile, "%c ", &c);
            pRecord->name = c;
            fscanf(inFile, "%d ", &n);
            pRecord->order = n;
            pRecord->chain = NULL; // Initialize the chain pointer
        }

        fclose(inFile);
    }

    return dataSz;
}

// prints the records
void printRecords(struct RecordType pData[], int dataSz)
{
    int i;
    printf("\nRecords:\n");
    for (i = 0; i < dataSz; ++i)
    {
        printf("\t%d %c %d\n", pData[i].id, pData[i].name, pData[i].order);
    }
    printf("\n\n");
}

// display records in the hash structure
void displayRecordsInHash(struct HashType *pHashArray, int hashSz)
{
    int i, j;

    printf("\nRecords in Hash Table:\n");
    for (i = 0; i < hashSz; ++i)
    {
        printf("Index %d -> ", i);
        struct RecordType *current = pHashArray->chain[i];
        while (current != NULL)
        {
            printf("%d %c %d -> ", current->id, current->name, current->order);
            current = current->chain;
        }
        printf("NULL\n");
    }
}

int main(void)
{
    struct RecordType *pRecords;
    int recordSz = 0;
    int i;

    recordSz = parseData("input_lab_9.txt", &pRecords);
    printRecords(pRecords, recordSz);

    struct HashType hashTable;
    for (i = 0; i < MAX_HASH_SIZE; i++)
    {
        hashTable.chain[i] = NULL;
    }


    for (i = 0; i < recordSz; i++)
    {
        int index = hash(pRecords[i].id); 
        struct RecordType *newNode = (struct RecordType *)malloc(sizeof(struct RecordType));
        newNode->id = pRecords[i].id;
        newNode->name = pRecords[i].name;
        newNode->order = pRecords[i].order;


        newNode->chain = hashTable.chain[index];
        hashTable.chain[index] = newNode;
    }

    displayRecordsInHash(&hashTable, MAX_HASH_SIZE);

    return 0;
}
